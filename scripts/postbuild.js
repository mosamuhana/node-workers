const { join } = require("path");
const { readFile, writeFile } = require("fs/promises");

const readScript = (file) => readFile(file, 'utf8');
const writeScript = (file, content) => writeFile(file, content, 'utf8');

//const RX = /^\/\*.*\*\//gms;
const RX = /\/\*[\s\S]*?\*\//gm;

const BANNER = `/**
* @author Mosa Muhana <mosamuhana@gmail.com>
* https://github.com/mosamuhana
* See LICENSE file in root directory for full license.
*/`

const splitLines = content => content.split(/\r?\n/g);

const cleanEmptyLines = (content) =>
    splitLines(content).filter(line => line.trim().length > 0).join('\n');

const addBanner = content => BANNER + '\n' + content;

const cleanMultiLineComments = content => content.replace(RX, "");

const deleteLine = (content, ...filters) => {
    let lines = splitLines(content);
    for (const filter of filters) {
        lines = lines.filter(x => !filter(x));
    }
    return lines.join('\n');
}

const cleanBy = (content, ...fns) => fns.reduce((result, fn) => fn(result), content);

async function updateScript(file) {
    const content = await readScript(file);
    const newContent = cleanBy(content,
        cleanMultiLineComments,
        cleanEmptyLines,
        addBanner,
    );
    if (newContent !== content) {
        await writeScript(file, newContent);
    }
}

async function updateDefinition(file) {
    const content = await readScript(file);
    const newContent = cleanBy(content,
        //cleanTsSignature,
        //content => deleteLine(content, line => line.includes('export {};')),
        content => deleteLine(content,
            line => line.includes('// Generated by dts-bundle-generator'),
            line => line.includes('export {};'),
        ),
        cleanEmptyLines,
        addBanner,
    );
    if (newContent !== content) {
        await writeScript(file, newContent);
    }
}

async function main() {
    const dist = join(process.cwd(), "dist");
    const name = 'index';
    const files = [ 'js', 'mjs' ].map(ext => join(dist, `${name}.${ext}`));

    await Promise.all([
        ...files.map(file => updateScript(file)),
        updateDefinition(join(dist, `${name}.d.ts`)),
    ]);
}

main();
